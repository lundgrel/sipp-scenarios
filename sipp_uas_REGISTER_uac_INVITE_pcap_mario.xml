<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- This program is free software; you can redistribute it and/or      -->
<!-- modify it under the terms of the GNU General Public License as     -->
<!-- published by the Free Software Foundation; either version 2 of the -->
<!-- License, or (at your option) any later version.                    -->
<!--                                                                    -->
<!-- This program is distributed in the hope that it will be useful,    -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of     -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      -->
<!-- GNU General Public License for more details.                       -->
<!--                                                                    -->
<!-- You should have received a copy of the GNU General Public License  -->
<!-- along with this program; if not, write to the                      -->
<!-- Free Software Foundation, Inc.,                                    -->
<!-- 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             -->
<!--                                                                    -->
<!--                 Sipp default 'uas' scenario.                       -->
<!--                                                                    -->

<scenario name="Basic UAS responder">


 <recv request="REGISTER" crlf="true">
    <action>
     <!-- since we need to send a request to the remote part -->
     <!-- we need to extract the Contact and the From header content -->
     <ereg regexp=".*" search_in="hdr" header="Contact" assign_to="full_remote_contact"/>
     <!-- assign the content of the Contaact SIP URI to the remote_contact var -->
     <!-- first var of assign_to contains the whole match -->
     <ereg regexp="sip:(.*transport=[A-Z]+)" search_in="hdr" header="Contact" assign_to="remote_contact"/>
     <!-- <ereg regexp="sip:(.*)\>.*" search_in="hdr" header="Contact" assign_to="remote_contact"/>  -->
    </action>
  </recv>

  <!-- The '[last_*]' keyword is replaced automatically by the          -->
  <!-- specified header if it was present in the last message received  -->
  <!-- (except if it was a retransmission). If the header was not       -->
  <!-- present or if no message has been received, the '[last_*]'       -->
  <!-- keyword is discarded, and all bytes until the end of the line    -->
  <!-- are also discarded.                                              -->
  <!--                                                                  -->
  <!-- If the specified header was present several times in the         -->
  <!-- message, all occurences are concatenated (CRLF seperated)        -->
  <!-- to be used in place of the '[last_*]' keyword.                   -->

  <send>
    <![CDATA[

      SIP/2.0 200 RRegisterrred
      [last_Via:]
      [last_From:]
      [last_To:];tag=[pid]SIPpTag01[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: [$full_remote_contact]
      x-remote-contact: [$remote_contact]
      Content-Length: 0

    ]]>
  </send>


    <pause milliseconds="1500"/>

  <send retrans="500">
    <![CDATA[

      INVITE [$remote_contact] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
      To: sut <sip:[service]@remote.host>
      Call-ID: [call_id]-INV
      CSeq: 1 INVITE
      Contact: <sip:sipp@[local_ip]:[local_port];transport=[transport]>
      Max-Forwards: 70
      Subject: Performance Test
      Content-Type: application/sdp
      Content-Length: [len]

      v=0
      o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
      s=-
      c=IN IP[local_ip_type] [local_ip]
      t=0 0
      m=audio [media_port] RTP/AVP 8 101
      a=rtpmap:101 telephone-event/8000
      a=fmtp:101 0-11,16

    ]]>
  </send>

  <recv response="100"
        optional="true">
  </recv>

  <recv response="180" optional="true">
  </recv>

  <recv response="200">
  </recv>


  <send>
    <![CDATA[

      ACK [$remote_contact] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
      To: sut <sip:[service]@remote.host>[peer_tag_param]
      Call-ID: [call_id]-INV
      CSeq: 1 ACK
      Contact: <sip:sipp@[local_ip]:[local_port];transport=[transport]>
      Max-Forwards: 70
      Subject: Performance Test
      Content-Length: 0

    ]]>
  </send>
  
    <pause milliseconds="100"/>

  <!-- Play a pre-recorded PCAP file (RTP stream)                       -->
  <nop>
    <action>
      <exec play_pcap_audio="mario_choppy_speech.pcap"/>
    </action>
  </nop>


  <!-- Keep the call open for a while in case the 200 is lost to be     -->
  <!-- able to retransmit it if we receive the BYE again.               -->
  <pause milliseconds="21000"/>

  <send>
    <![CDATA[

      BYE [$remote_contact] SIP/2.0
      Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[pid]SIPpTag00[call_number]
      To: sut <sip:[service]@remote.host>[peer_tag_param]
      Call-ID: [call_id]-INV
      CSeq: 1 ACK
      Contact: <sip:sipp@[local_ip]:[local_port];transport=[transport]>
      Max-Forwards: 70
      Subject: Performance Test
      Content-Length: 0

    ]]>
  </send>
  
  <recv response="200" />

			

</scenario>

